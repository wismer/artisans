(function() {
  var CompileHelper, fs, output_path, path;

  path = require('path');

  fs = require('fs');

  output_path = require('./output_path');

  module.exports = CompileHelper = (function() {

    function CompileHelper(file) {
      var layout_path, options, _ref;
      this.file = file;
      options = global.options;
      this.export_path = output_path(this.file);
      this.extension = path.extname(this.file).slice(1);
      this.target_extension = path.extname(this.export_path).slice(1);
      this.file_contents = fs.readFileSync(this.file, 'utf8');
      if (this.target_extension === 'html') {
        this.layout = options.layouts["default"];
        _ref = options.layouts;
        for (file in _ref) {
          layout_path = _ref[file];
          if (this.file === file) {
            this.layout = layout_path;
          }
        }
        this.layout_path = path.join(process.cwd(), options.folder_config.views, this.layout);
        this.layout_contents = fs.readFileSync(this.layout_path, 'utf8');
      }
    }

    CompileHelper.prototype.locals = function(extra) {
      var key, value;
      options.locals.path = this.export_path;
      for (key in extra) {
        value = extra[key];
        options.locals[key] = value;
      }
      return options.locals;
    };

    CompileHelper.prototype.write = function(write_content) {
      if (options.compress) {
        write_content = this.compress(write_content);
      }
      fs.writeFileSync(this.export_path, write_content);
      return global.options.debug.log("compiled " + (path.basename(this.file)));
    };

    CompileHelper.prototype.compress = function(write_content) {
      return require('../utils/compressor')(write_content, this.target_extension);
    };

    return CompileHelper;

  })();

}).call(this);
