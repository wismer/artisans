(function() {
  var basic_root, colors, fs, path, root, run, shell, should;

  should = require('should');

  path = require('path');

  fs = require('fs');

  colors = require('colors');

  shell = require('shelljs');

  run = require('child_process').exec;

  root = path.join(__dirname);

  basic_root = path.join(root, 'sandbox/basic');

  describe('command', function() {
    describe('compile', function() {
      before(function(done) {
        return run("cd " + basic_root + "; ../../../bin/roots compile", done);
      });
      it('should compile files to /public', function() {
        return fs.readdirSync(path.join(basic_root, 'public')).should.have.lengthOf(5);
      });
      it('should minify all css and javascript', function() {
        var js_content;
        js_content = fs.readFileSync(path.join(basic_root, 'public/js/main.js'), 'utf8');
        return js_content.should.not.match(/\n/);
      });
      return it('should compile all files to public', function() {
        var css_content;
        css_content = fs.readFileSync(path.join(basic_root, 'public/css/example.css'), 'utf8');
        css_content.should.not.match(/\n/);
        return shell.rm('-rf', path.join(basic_root, 'public'));
      });
    });
    describe('new', function() {
      var test_path;
      test_path = path.join(root, 'testproj');
      it('should use the default template if no flags present', function(done) {
        return run("cd " + root + "; ../bin/roots new testproj", function() {
          fs.existsSync(test_path).should.be.ok;
          fs.existsSync(path.join(test_path, 'app.coffee')).should.be.ok;
          fs.existsSync(path.join(test_path, 'readme.md')).should.be.ok;
          fs.existsSync(path.join(test_path, 'views')).should.be.ok;
          fs.existsSync(path.join(test_path, 'views/index.jade')).should.be.ok;
          fs.existsSync(path.join(test_path, 'views/layout.jade')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/favicon.ico')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/css')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/css/_settings.styl')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/css/master.styl')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/js')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/js/main.coffee')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/js/_helper.coffee')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/js/pie.htc')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/js/require.js')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/img')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/img/noise.png')).should.be.ok;
          shell.rm('-rf', path.join(root, 'testproj'));
          return done();
        });
      });
      it('should use express template if the --express flag is present', function(done) {
        return run("cd " + root + "; ../bin/roots new testproj --express", function() {
          fs.existsSync(test_path).should.be.ok;
          fs.existsSync(path.join(test_path, 'app.js')).should.be.ok;
          fs.existsSync(path.join(test_path, 'routes')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets')).should.be.ok;
          fs.existsSync(path.join(test_path, 'views')).should.be.ok;
          fs.existsSync(path.join(test_path, 'public')).should.be.ok;
          shell.rm('-rf', path.join(root, 'testproj'));
          return done();
        });
      });
      return it('should use basic template if the --basic flag is present', function(done) {
        return run("cd " + root + "; ../bin/roots new testproj --basic", function() {
          fs.existsSync(test_path).should.be.ok;
          fs.existsSync(path.join(test_path, 'views/index.html')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/js/main.js')).should.be.ok;
          fs.existsSync(path.join(test_path, 'assets/css/example.css')).should.be.ok;
          shell.rm('-rf', path.join(root, 'testproj'));
          return done();
        });
      });
    });
    describe('plugin', function() {
      it('should create a template inside /plugins on \'generate\'', function(done) {
        return run("cd " + basic_root + "; ../../../bin/roots plugin generate", function() {
          fs.existsSync(path.join(basic_root, 'plugins/template.coffee')).should.be.ok;
          shell.rm('-rf', path.join(basic_root, 'plugins'));
          return done();
        });
      });
      return it('should use the javascript template if called with --js', function(done) {
        return run("cd " + basic_root + "; ../../../bin/roots plugin generate --js", function() {
          fs.existsSync(path.join(basic_root, 'plugins/template.js')).should.be.ok;
          shell.rm('-rf', path.join(basic_root, 'plugins'));
          return done();
        });
      });
    });
    describe('version', function() {
      return it('should output the correct version number for roots', function(done) {
        var version;
        version = JSON.parse(fs.readFileSync('package.json')).version;
        return run('./bin/roots version', function(err, out) {
          out.replace(/\n/, '').should.eql(version);
          return done();
        });
      });
    });
    return describe('js', function() {
      return it('should expose bower\'s interface', function(done) {
        return run("cd " + basic_root + "; ../../../bin/roots js", function(err, out, stdout) {
          out.should.match(/bower/);
          return done();
        });
      });
    });
  });

  describe('compiler', function() {
    var compiler;
    compiler = null;
    before(function() {
      var Compiler;
      Compiler = require(path.join(root, '../lib/compiler'));
      return compiler = new Compiler();
    });
    return it('eventemitter should be hooked up properly', function(done) {
      compiler.on('finished', function() {
        return done();
      });
      return compiler.finish();
    });
  });

  describe('jade', function() {
    var jade_path;
    jade_path = path.join(root, 'sandbox/jade');
    return it('should compile jade view templates', function(done) {
      return run("cd " + jade_path + "; ../../../bin/roots compile --no-compress", function() {
        fs.existsSync(path.join(jade_path, 'public/index.html')).should.be.ok;
        shell.rm('-rf', path.join(jade_path, 'public'));
        return done();
      });
    });
  });

  describe('ejs', function() {
    var ejs_path;
    ejs_path = path.join(root, 'sandbox/ejs');
    return it('should compile ejs', function(done) {
      return run("cd " + ejs_path + "; ../../../bin/roots compile --no-compress", function() {
        fs.existsSync(path.join(ejs_path, 'public/index.html')).should.be.ok;
        shell.rm('-rf', path.join(ejs_path, 'public'));
        return done();
      });
    });
  });

  describe('coffeescript', function() {
    var coffeescript_path, coffeescript_path_2;
    coffeescript_path = path.join(root, 'sandbox/coffeescript');
    coffeescript_path_2 = path.join(root, 'sandbox/coffee-basic');
    it('should compile coffeescript and requires should work', function(done) {
      return run("cd " + coffeescript_path + "; ../../../bin/roots compile --no-compress", function() {
        var require_content;
        fs.existsSync(path.join(coffeescript_path, 'public/basic.js')).should.be.ok;
        fs.existsSync(path.join(coffeescript_path, 'public/require.js')).should.be.ok;
        require_content = fs.readFileSync(path.join(coffeescript_path, 'public/require.js'), 'utf8');
        require_content.should.match(/BASIC/);
        shell.rm('-rf', path.join(coffeescript_path, 'public'));
        return done();
      });
    });
    return it('should compile without closures when specified in app.coffee', function(done) {
      return run("cd " + coffeescript_path_2 + "; ../../../bin/roots compile --no-compress", function() {
        var require_content;
        fs.existsSync(path.join(coffeescript_path_2, 'public/testz.js')).should.be.ok;
        require_content = fs.readFileSync(path.join(coffeescript_path_2, 'public/testz.js'), 'utf8');
        require_content.should.not.match(/function/);
        shell.rm('-rf', path.join(coffeescript_path_2, 'public'));
        return done();
      });
    });
  });

  describe('stylus', function() {
    var stylus_path;
    stylus_path = path.join(root, 'sandbox/stylus');
    before(function(done) {
      return run("cd " + stylus_path + "; ../../../bin/roots compile --no-compress", function() {
        return done();
      });
    });
    it('should compile stylus with roots css', function() {
      return fs.existsSync(path.join(stylus_path, 'public/basic.css')).should.be.ok;
    });
    return it('should include the project directory for requires', function() {
      var require_content;
      fs.existsSync(path.join(stylus_path, 'public/req.css')).should.be.ok;
      require_content = fs.readFileSync(path.join(stylus_path, 'public/req.css'), 'utf8');
      require_content.should.match(/#000/);
      return shell.rm('-rf', path.join(stylus_path, 'public'));
    });
  });

  describe('static files', function() {
    var static_path;
    static_path = path.join(root, 'sandbox/static');
    before(function(done) {
      return run("cd " + static_path + "; ../../../bin/roots compile --no-compress", function() {
        return done();
      });
    });
    return it('copies static files', function() {
      var require_content;
      fs.existsSync(path.join(static_path, 'public/whatever.poop')).should.be.ok;
      require_content = fs.readFileSync(path.join(static_path, 'public/whatever.poop'), 'utf8');
      require_content.should.match(/roots dont care/);
      return shell.rm('-rf', path.join(static_path, 'public'));
    });
  });

  describe('errors', function() {
    var errors_path;
    errors_path = path.join(root, 'sandbox/errors');
    return it('notifies you if theres an error', function(done) {
      return run("cd " + errors_path + "; ../../../bin/roots compile --no-compress", function(a, b, stderr) {
        stderr.should.match(/ERROR/);
        return done();
      });
    });
  });

  describe('deploy', function() {
    var deployer;
    deployer = null;
    before(function() {
      var Deployer, test_adapter;
      Deployer = require(path.join(root, '../lib/deployer'));
      test_adapter = {
        test: function(input) {
          return input;
        }
      };
      deployer = new Deployer(test_adapter, '');
      return deployer.add_shell_method('test');
    });
    it('handles adapters correctly', function() {
      deployer.test(true).should.be.ok;
      return deployer.test(false).should.not.be.ok;
    });
    return it('has all the required shell methods', function() {
      deployer.check_install_status.should.exist;
      deployer.check_credentials.should.exist;
      deployer.compile_project.should.exist;
      deployer.add_config_files.should.exist;
      deployer.commit_files.should.exist;
      deployer.create_project.should.exist;
      return deployer.push_code.should.exist;
    });
  });

}).call(this);
